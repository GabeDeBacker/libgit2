resources:
- repo: self

trigger:
- master
- maint/*

jobs:
- job: linux_trusty_amd64_gcc_openssl
  displayName: 'Linux (Trusty; amd64; GCC; OpenSSL)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      imageName: 'libgit2/trusty-openssl:latest'
      environmentVariables: |
       CC=gcc
       LEAK_CHECK=valgrind

- job: linux_trusty_amd64_gcc_mbedtls
  displayName: 'Linux (Trusty; amd64; GCC; mbedTLS)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      imageName: 'libgit2/trusty-mbedtls:latest'
      environmentVariables: |
       CC=gcc
       CMAKE_OPTIONS=-DUSE_HTTPS=mbedTLS -DSHA1_BACKEND=mbedTLS
       LEAK_CHECK=valgrind

- job: linux_trusty_amd64_clang_openssl
  displayName: 'Linux (Trusty; amd64; Clang; OpenSSL)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      imageName: 'libgit2/trusty-openssl:latest'
      environmentVariables: |
       CC=clang
       LEAK_CHECK=valgrind

- job: linux_trusty_amd64_clang_mbedtls
  displayName: 'Linux (Trusty; amd64; Clang; mbedTLS)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      imageName: 'libgit2/trusty-mbedtls:latest'
      environmentVariables: |
       CC=clang
       CMAKE_OPTIONS=-DUSE_HTTPS=mbedTLS -DSHA1_BACKEND=mbedTLS
       LEAK_CHECK=valgrind

- job: linux_xenial_arm32
  displayName: 'Linux (Xenial; arm32; GCC)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      qemu: 'true'
      imageName: 'libgit2/xenial-arm32:test'
      environmentVariables: |
       SKIP_PROXY_TESTS=true

- job: linux_xenial_arm64
  displayName: 'Linux (Xenial; arm64; GCC)'
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ci/vsts-docker.yml
    parameters:
      qemu: 'true'
      imageName: 'libgit2/xenial-arm64:test'
      environmentVariables: |
       SKIP_PROXY_TESTS=true

- job: macos
  displayName: 'macOS'
  pool:
    vmImage: 'macOS 10.13'
  steps:
  - bash: . '$(Build.SourcesDirectory)/ci/setup-osx.sh'
    displayName: Setup
  - template: ci/vsts-bash.yml
    parameters:
      environmentVariables:
        TMPDIR: $(Agent.TempDirectory)
        PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig
        LEAK_CHECK: leaks

- job: windows_vs_amd64
  displayName: 'Windows (amd64; Visual Studio)'
  pool: Hosted
  steps:
  - template: ci/vsts-powershell.yml
    parameters:
      environmentVariables:
        CMAKE_OPTIONS: -DMSVC_CRTDBG=ON -G"Visual Studio 12 2013 Win64"

- job: windows_vs_x86
  displayName: 'Windows (x86; Visual Studio)'
  pool: Hosted
  steps:
  - template: ci/vsts-powershell.yml
    parameters:
      environmentVariables:
        CMAKE_OPTIONS: -DMSVC_CRTDBG=ON -G"Visual Studio 12 2013"

- job: windows_mingw_amd64
  displayName: 'Windows (amd64; MinGW)'
  pool: Hosted
  steps:
  - powershell: . '$(Build.SourcesDirectory)\ci\setup-mingw.ps1'
    displayName: Setup
    env:
      TEMP: $(Agent.TempDirectory)
      ARCH: amd64
  - template: ci/vsts-powershell.yml
    parameters:
      environmentVariables:
        CMAKE_OPTIONS: -G"MinGW Makefiles"
        PATH: $(Agent.TempDirectory)\mingw64\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\CMake\bin

- job: windows_mingw_x86
  displayName: 'Windows (x86; MinGW)'
  pool: Hosted
  steps:
  - powershell: . '$(Build.SourcesDirectory)\ci\setup-mingw.ps1'
    displayName: Setup
    workingDirectory: '$(Build.BinariesDirectory)'
    env:
      TEMP: $(Agent.TempDirectory)
      ARCH: x86
  - template: ci/vsts-powershell.yml
    parameters:
      environmentVariables:
        CMAKE_OPTIONS: -G"MinGW Makefiles"
        PATH: $(Agent.TempDirectory)\mingw32\bin;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\CMake\bin
